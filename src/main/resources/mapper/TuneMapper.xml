<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forzatune.backend.mapper.TuneMapper">
    
    <!-- 结果映射 -->
    <resultMap id="TuneResultMap" type="com.forzatune.backend.entity.Tune">
        <id property="id" column="id"/>
        <result property="carId" column="car_id"/>
        <result property="authorId" column="author_id"/>
        <result property="authorXboxId" column="author_xbox_id"/>
        <result property="shareCode" column="share_code"/>
        <result property="preference" column="preference"/>
        <result property="piClass" column="pi_class"/>
        <result property="finalPI" column="final_pi"/>
        <result property="drivetrain" column="drivetrain"/>
        <result property="tireCompound" column="tire_compound"/>
        <result property="raceType" column="race_type"/>
        <result property="surfaceConditions" column="surface_conditions" typeHandler="com.forzatune.backend.handler.JsonTypeHandler"/>
        <result property="description" column="description"/>
        <result property="isProTune" column="is_pro_tune"/>
        <result property="isParametersPublic" column="is_parameters_public"/>
        <result property="hasDetailedParameters" column="has_detailed_parameters"/>
        <result property="screenshotUrl" column="screenshot_url"/>
        <result property="likeCount" column="like_count"/>
        <result property="gameCategory" column="game_category"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="parameters" column="parameters" typeHandler="com.forzatune.backend.handler.JsonObjectTypeHandler"/>
    </resultMap>

    <resultMap id="TuneDtoResultMap" type="com.forzatune.backend.dto.TuneDto">
        <id property="id" column="id"/>
        <result property="shareCode" column="share_code"/>
        <result property="authorXboxId" column="author_xbox_id"/>
        <result property="isProTune" column="is_pro_tune"/>
        <result property="preference" column="preference"/>
        <result property="piClass" column="pi_class"/>
        <result property="finalPI" column="final_pi"/>
        <result property="likeCount" column="like_count"/>
        <result property="gameCategory" column="game_category"/>
        <result property="createdAt" column="created_at"/>
    </resultMap>

    <!-- 基础查询字段 -->
    <sql id="Base_Column_List">
        t.id, t.car_id, t.author_id, t.author_xbox_id, t.share_code, t.preference,
        t.pi_class, t.final_pi, t.drivetrain, t.tire_compound, t.race_type, t.surface_conditions,
        t.description, t.is_pro_tune, t.is_parameters_public, t.has_detailed_parameters,
        t.screenshot_url, t.like_count, t.game_category, t.created_at, t.updated_at, t.parameters
    </sql>

    <select id="selectRecentTunesWithDetails" resultMap="TuneDtoResultMap">
        SELECT
        t.id, t.share_code, t.car_id, t.author_xbox_id, t.is_pro_tune, t.preference, t.pi_class,
        t.final_pi, t.like_count, t.game_category, t.created_at,
        c.name AS carName
        FROM
        tunes t
        LEFT JOIN
        cars c ON t.car_id = c.id
        ORDER BY
        t.created_at DESC
        LIMIT #{limit}
    </select>

    <select id="selectProTunesWithDetails" resultMap="TuneDtoResultMap">
        SELECT
        t.id, t.share_code, t.car_id, t.author_xbox_id, t.is_pro_tune, t.preference, t.pi_class,
        t.final_pi, t.like_count, t.game_category, t.created_at,
        c.name AS carName
        FROM
        tunes t
        LEFT JOIN
        cars c ON t.car_id = c.id
        WHERE
        t.is_pro_tune = 1
        ORDER BY
        t.like_count DESC
        LIMIT #{limit}
    </select>

    <select id="countTotal" resultType="long">
        SELECT COUNT(*) FROM tunes
    </select>

    <!-- 按游戏分类统计调校总数 -->
    <select id="countTotalByGameCategory" resultType="long">
        SELECT COUNT(*) FROM tunes WHERE game_category = #{gameCategory}
    </select>

    <!-- 按游戏分类查询最新调校 -->
    <select id="selectRecentTunesWithDetailsByGameCategory" resultMap="TuneDtoResultMap">
        SELECT
            t.id, t.share_code, t.car_id, t.author_xbox_id, t.is_pro_tune, t.preference, t.pi_class,
            t.final_pi, t.like_count, t.game_category, t.created_at,
            c.name AS carName
        FROM
            tunes t
        LEFT JOIN
            cars c ON t.car_id = c.id AND c.game_category = #{gameCategory}
        WHERE
            t.game_category = #{gameCategory}
        ORDER BY
            t.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 按游戏分类查询PRO调校 -->
    <select id="selectProTunesWithDetailsByGameCategory" resultMap="TuneDtoResultMap">
        SELECT
            t.id, t.share_code, t.car_id, t.author_xbox_id, t.is_pro_tune, t.preference, t.pi_class,
            t.final_pi, t.like_count, t.game_category, t.created_at,
            c.name AS carName
        FROM
            tunes t
        LEFT JOIN
            cars c ON t.car_id = c.id AND c.game_category = #{gameCategory}
        WHERE
            t.game_category = #{gameCategory}
            AND t.is_pro_tune = 1
        ORDER BY
            t.like_count DESC
        LIMIT #{limit}
    </select>

    <!-- 根据ID获取调校 -->
    <select id="selectById" resultMap="TuneResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.id = #{id}
    </select>

    <!-- 根据ID获取调校及详情信息 -->
    <select id="selectByIdWithDetail" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.id = #{id}
    </select>
    
    <!-- 根据车辆ID获取调校 -->
    <select id="selectByCarId" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.car_id = #{carId}
        ORDER BY t.is_pro_tune DESC, t.like_count DESC, t.created_at DESC
    </select>
    
    <!-- 根据作者ID获取调校 -->
    <select id="selectByAuthorId" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.author_id = #{authorId}
        ORDER BY t.created_at DESC
    </select>
    
    <!-- 获取PRO调校（基础版本） -->
    <select id="selectProTunesBasic" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.is_pro_tune = 1
        ORDER BY t.like_count DESC, t.created_at DESC
    </select>
    
    <!-- 获取最新调校（包含参数） -->
    <select id="selectRecentTunesWithParameters" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        ORDER BY t.created_at DESC
    </select>
    
    <!-- 根据车辆ID统计调校数量 -->
    <select id="countByCarId" resultType="int">
        SELECT COUNT(*) FROM tunes WHERE car_id = #{carId}
    </select>
    
    <!-- 插入调校 -->
    <insert id="insert" parameterType="com.forzatune.backend.entity.Tune">
        INSERT INTO tunes (
            id, car_id, author_id, author_xbox_id, share_code, preference, pi_class, final_pi,
            drivetrain, tire_compound, race_type, surface_conditions, description, is_pro_tune,
            is_parameters_public, has_detailed_parameters, screenshot_url, like_count, game_category,
            parameters, created_at, updated_at
        ) VALUES (
            #{id}, #{carId}, #{authorId}, #{authorXboxId}, #{shareCode}, #{preference}, #{piClass}, #{finalPI},
            #{drivetrain}, #{tireCompound}, #{raceType}, #{surfaceConditions,typeHandler=com.forzatune.backend.handler.JsonTypeHandler}, #{description}, #{isProTune},
            #{isParametersPublic}, #{hasDetailedParameters}, #{screenshotUrl}, #{likeCount}, #{gameCategory},
            #{parameters,typeHandler=com.forzatune.backend.handler.JsonObjectTypeHandler}, NOW(), NOW()
        )
    </insert>
    
    <!-- 更新调校 -->
    <update id="update" parameterType="com.forzatune.backend.entity.Tune">
        UPDATE tunes SET
            car_id = #{carId},
            author_id = #{authorId},
            author_xbox_id = #{authorXboxId},
            share_code = #{shareCode},
            preference = #{preference},
            pi_class = #{piClass},
            final_pi = #{finalPI},
            drivetrain = #{drivetrain},
            tire_compound = #{tireCompound},
            race_type = #{raceType},
            surface_conditions = #{surfaceConditions,typeHandler=com.forzatune.backend.handler.JsonTypeHandler},
            description = #{description},
            is_pro_tune = #{isProTune},
            is_parameters_public = #{isParametersPublic},
            has_detailed_parameters = #{hasDetailedParameters},
            screenshot_url = #{screenshotUrl},
            like_count = #{likeCount},
            game_category = #{gameCategory},
            parameters = #{parameters,typeHandler=com.forzatune.backend.handler.JsonObjectTypeHandler},
            updated_at = NOW()
        WHERE id = #{id}
    </update>
    
    <!-- 删除调校 -->
    <delete id="deleteById">
        DELETE FROM tunes WHERE id = #{id}
    </delete>
    
    <!-- 增加点赞数 -->
    <update id="incrementLikeCount">
        UPDATE tunes SET like_count = like_count + 1 WHERE id = #{id}
    </update>
    
    <!-- 减少点赞数 -->
    <update id="decrementLikeCount">
        UPDATE tunes SET like_count = GREATEST(like_count - 1, 0) WHERE id = #{id}
    </update>

    <!-- 检查用户是否已点赞 -->
    <select id="isLikedByUser" resultType="boolean">
        SELECT COUNT(*) > 0 
        FROM user_likes 
        WHERE tune_id = #{tuneId} AND user_id = #{userId}
    </select>

    <!-- 添加用户点赞记录 -->
    <insert id="addLike">
        INSERT INTO user_likes (id, user_id, tune_id, created_at) 
        VALUES (UUID(), #{userId}, #{tuneId}, NOW())
    </insert>

    <!-- 移除用户点赞记录 -->
    <delete id="removeLike">
        DELETE FROM user_likes 
        WHERE tune_id = #{tuneId} AND user_id = #{userId}
    </delete>

    <!-- 根据车辆ID和条件查询调校 -->
    <select id="selectByCarAndConditions" parameterType="com.forzatune.backend.vo.TunesSearchVo" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        <where>
            t.car_id = #{carId}
            <if test="preference != null and preference != ''">
                AND t.preference = #{preference}
            </if>
            <if test="piClass != null and piClass != ''">
                AND t.pi_class = #{piClass}
            </if>
            <if test="drivetrain != null and drivetrain != ''">
                AND t.drivetrain = #{drivetrain}
            </if>
            <if test="tireCompound != null and tireCompound != ''">
                AND t.tire_compound = #{tireCompound}
            </if>
            <if test="raceType != null and raceType != ''">
                AND t.race_type = #{raceType}
            </if>
            <if test="proOnly != null and proOnly == true">
                AND t.is_pro_tune = 1
            </if>
        </where>
        <include refid="Tune_Order_By"/>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 根据车辆ID和条件统计调校数量 -->
    <select id="countByCarAndConditions" parameterType="com.forzatune.backend.vo.TunesSearchVo" resultType="long">
        SELECT COUNT(*)
        FROM tunes t
        <where>
            t.car_id = #{carId}
            <if test="preference != null and preference != ''">
                AND t.preference = #{preference}
            </if>
            <if test="piClass != null and piClass != ''">
                AND t.pi_class = #{piClass}
            </if>
            <if test="drivetrain != null and drivetrain != ''">
                AND t.drivetrain = #{drivetrain}
            </if>
            <if test="tireCompound != null and tireCompound != ''">
                AND t.tire_compound = #{tireCompound}
            </if>
            <if test="raceType != null and raceType != ''">
                AND t.race_type = #{raceType}
            </if>
            <if test="proOnly != null and proOnly == true">
                AND t.is_pro_tune = 1
            </if>
        </where>
    </select>

    <!-- 调校排序规则 -->
    <sql id="Tune_Order_By">
        <choose>
            <when test="sortBy != null and sortBy != ''">
                ORDER BY 
                <choose>
                    <when test="sortBy == 'newest'">t.created_at</when>
                    <when test="sortBy == 'oldest'">t.created_at</when>
                    <when test="sortBy == 'likes'">t.like_count</when>
                    <when test="sortBy == 'name'">t.share_code</when>
                    <otherwise>t.created_at</otherwise>
                </choose>
                <choose>
                    <when test="sortOrder == 'desc'">DESC</when>
                    <otherwise>ASC</otherwise>
                </choose>
            </when>
            <otherwise>
                ORDER BY t.created_at DESC
            </otherwise>
        </choose>
    </sql>

    <!-- 获取热门调校（按点赞数排序） -->
    <select id="selectPopularTunes" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        ORDER BY t.like_count DESC, t.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 获取最新调校（按创建时间排序） -->
    <select id="selectRecentTunes" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        ORDER BY t.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 获取PRO调校（按点赞数排序） -->
    <select id="selectProTunes" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.is_pro_tune = 1
        ORDER BY t.like_count DESC, t.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 增加收藏数 -->
    <update id="incrementFavoriteCount">
        UPDATE tunes SET favorite_count = favorite_count + 1 WHERE id = #{id}
    </update>

    <!-- 减少收藏数 -->
    <update id="decrementFavoriteCount">
        UPDATE tunes SET favorite_count = GREATEST(favorite_count - 1, 0) WHERE id = #{id}
    </update>

    <!-- 批量查询车辆调校数量 -->
    <select id="selectTuneCountByCarIds" resultType="com.forzatune.backend.dto.CarTuneCount">
        SELECT 
            car_id as carId,
            COUNT(*) as tuneCount
        FROM tunes 
        WHERE car_id IN
        <foreach collection="carIds" item="carId" open="(" separator="," close=")">
            #{carId}
        </foreach>
        GROUP BY car_id
    </select>

    <!-- 根据分享码查询调校 -->
    <select id="selectByShareCode" resultMap="TuneResultMap">
        SELECT 
            <include refid="Base_Column_List"/>
        FROM tunes t
        WHERE t.share_code = #{shareCode}
        LIMIT 1
    </select>
</mapper> 