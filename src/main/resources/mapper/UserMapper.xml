<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forzatune.backend.mapper.UserMapper">
    
    <!-- 结果映射 -->
    <resultMap id="UserResultMap" type="com.forzatune.backend.entity.User">
        <id property="id" column="id"/>
        <result property="email" column="email"/>
        <result property="passwordHash" column="password_hash"/>
        <result property="xboxId" column="xbox_id"/>
        <result property="isProPlayer" column="is_pro_player"/>
        <result property="proPlayerSince" column="pro_player_since"/>
        <result property="totalTunes" column="total_tunes"/>
        <result property="totalLikes" column="total_likes"/>
        <result property="avatarUrl" column="avatar_url"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="bio" column="bio"/>
        <result property="userTier" column="user_tier"/>
        <result property="lastLogin" column="last_login"/>
        <result property="isActive" column="is_active"/>
    </resultMap>

    <select id="countTotal" resultType="long">
        SELECT COUNT(*) FROM users WHERE is_active = 1
    </select>

    <select id="countProPlayers" resultType="long">
        SELECT COUNT(*) FROM users WHERE is_pro_player = 1 AND is_active = 1
    </select>

    <!-- 基础查询字段 -->
    <sql id="Base_Column_List">
        id, email, password_hash, xbox_id, is_pro_player, pro_player_since,
        total_tunes, total_likes, avatar_url, created_at, updated_at, bio, user_tier, last_login, is_active
    </sql>
    
    <!-- 根据ID获取用户 -->
    <select id="selectById" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE id = #{id} AND is_active = 1
    </select>
    
    <!-- 根据邮箱获取用户 -->
    <select id="selectByEmail" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE email = #{email} AND is_active = 1
    </select>
    
    <!-- 根据Gamertag获取用户 -->
    <select id="selectByGamertag" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE gamertag = #{gamertag} AND is_active = 1
    </select>
    
    <!-- 根据Xbox ID获取用户 -->
    <select id="selectByXboxId" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE xbox_id = #{xboxId} AND is_active = 1
    </select>
    
    <!-- 获取所有用户 -->
    <select id="selectAll" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE is_active = 1
        ORDER BY created_at DESC
    </select>
    
    <!-- 获取PRO玩家 -->
    <select id="selectProPlayers" resultMap="UserResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM users
        WHERE is_pro_player = 1 AND is_active = 1
        ORDER BY total_likes DESC, created_at DESC
    </select>

    
    <!-- 更新用户 -->
    <update id="update" parameterType="com.forzatune.backend.entity.User">
        UPDATE users SET
            email = #{email},
            password_hash = #{passwordHash},
            xbox_id = #{xboxId},
            is_pro_player = #{isProPlayer},
            pro_player_since = #{proPlayerSince},
            total_tunes = #{totalTunes},
            total_likes = #{totalLikes},
            avatar_url = #{avatarUrl},
            bio = #{bio},
            user_tier = #{userTier},
            last_login = #{lastLogin},
            is_active = #{isActive},
            updated_at = NOW()
        WHERE id = #{id}
    </update>
    
    <!-- 软删除用户 -->
    <update id="deleteById">
        UPDATE users SET is_active = 0, updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 更新最后登录时间 -->
    <update id="updateLastLogin">
        UPDATE users SET last_login = NOW(), updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 增加调校数量 -->
    <update id="incrementTotalTunes">
        UPDATE users SET total_tunes = total_tunes + 1, updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 减少调校数量 -->
    <update id="decrementTotalTunes">
        UPDATE users SET total_tunes = GREATEST(total_tunes - 1, 0), updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 增加点赞数量 -->
    <update id="incrementTotalLikes">
        UPDATE users SET total_likes = total_likes + 1, updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 减少点赞数量 -->
    <update id="decrementTotalLikes">
        UPDATE users SET total_likes = GREATEST(total_likes - 1, 0), updated_at = NOW() WHERE id = #{id}
    </update>
</mapper> 