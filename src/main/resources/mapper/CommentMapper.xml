<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forzatune.backend.mapper.CommentMapper">

    <resultMap id="CommentResultMap" type="com.forzatune.backend.entity.TuneComment">
        <id property="id" column="id"/>
        <result property="tuneId" column="tune_id"/>
        <result property="userId" column="user_id"/>
        <result property="userXboxId" column="user_xbox_id"/>
        <result property="content" column="content"/>
        <result property="rating" column="rating"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
<!--        <collection property="replies" ofType="com.forzatune.backend.entity.TuneCommentReply"-->
<!--                    column="id" select="selectRepliesByCommentId"/>-->
    </resultMap>
    
    <!-- 回复结果映射 -->
    <resultMap id="ReplyResultMap" type="com.forzatune.backend.entity.TuneCommentReply">
        <id property="id" column="id"/>
        <result property="commentId" column="comment_id"/>
        <result property="userId" column="user_id"/>
        <result property="userXboxId" column="user_xbox_id"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <select id="selectByTuneId" resultMap="CommentResultMap">
        SELECT
        id, tune_id, user_id, user_xbox_id,
        content, rating, like_count, created_at, updated_at
        FROM tune_comments
        WHERE tune_id = #{tuneId}
        ORDER BY created_at DESC
    </select>

    <select id="selectById" resultMap="CommentResultMap">
        SELECT
        id, tune_id, user_id, user_xbox_id,
        content, rating, like_count, created_at, updated_at
        FROM tune_comments
        WHERE id = #{id}
    </select>

<!--    &lt;!&ndash; 根据调校ID获取评论 &ndash;&gt;-->
<!--    <select id="selectByTuneId" resultMap="CommentResultMap">-->
<!--        SELECT -->
<!--            c.id, c.tune_id, c.user_id, c.user_gamertag, c.is_pro_player,-->
<!--            c.content, c.rating, c.like_count, c.created_at, c.updated_at,-->
<!--            r.id as reply_id, r.comment_id as reply_comment_id, r.user_id as reply_user_id,-->
<!--            r.user_gamertag as reply_user_gamertag, r.is_pro_player as reply_is_pro_player,-->
<!--            r.content as reply_content, r.like_count as reply_like_count,-->
<!--            r.created_at as reply_created_at, r.updated_at as reply_updated_at-->
<!--        FROM tune_comments c-->
<!--        LEFT JOIN comment_replies r ON c.id = r.comment_id-->
<!--        WHERE c.tune_id = #{tuneId}-->
<!--        ORDER BY c.created_at DESC, r.created_at ASC-->
<!--    </select>-->
<!--    -->
<!--    &lt;!&ndash; 根据ID获取评论 &ndash;&gt;-->
<!--    <select id="selectById" resultMap="CommentResultMap">-->
<!--        SELECT -->
<!--            c.id, c.tune_id, c.user_id, c.user_gamertag, c.is_pro_player,-->
<!--            c.content, c.rating, c.like_count, c.created_at, c.updated_at,-->
<!--            r.id as reply_id, r.comment_id as reply_comment_id, r.user_id as reply_user_id,-->
<!--            r.user_gamertag as reply_user_gamertag, r.is_pro_player as reply_is_pro_player,-->
<!--            r.content as reply_content, r.like_count as reply_like_count,-->
<!--            r.created_at as reply_created_at, r.updated_at as reply_updated_at-->
<!--        FROM tune_comments c-->
<!--        LEFT JOIN comment_replies r ON c.id = r.comment_id-->
<!--        WHERE c.id = #{id}-->
<!--        ORDER BY r.created_at ASC-->
<!--    </select>-->
    
    <!-- 插入评论 -->
    <insert id="insert" parameterType="com.forzatune.backend.entity.TuneComment">
        INSERT INTO tune_comments (
            id, tune_id, user_id, user_xbox_id, content, rating, like_count, created_at, updated_at
        ) VALUES (
            #{id}, #{tuneId}, #{userId}, #{userXboxId}, #{content}, #{rating}, #{likeCount}, NOW(), NOW()
        )
    </insert>
    
    <!-- 更新评论 -->
    <update id="update" parameterType="com.forzatune.backend.entity.TuneComment">
        UPDATE tune_comments SET
            content = #{content},
            rating = #{rating},
            updated_at = NOW()
        WHERE id = #{id}
    </update>
    
    <!-- 删除评论 -->
    <delete id="deleteById">
        DELETE FROM tune_comments WHERE id = #{id}
    </delete>
    
    <!-- 更新评论点赞数 -->
    <update id="updateLikeCount">
        UPDATE tune_comments SET like_count = #{likeCount}, updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 统计调校评论数量 -->
    <select id="countByTuneId" resultType="int">
        SELECT COUNT(*) FROM tune_comments WHERE tune_id = #{tuneId}
    </select>
    
    <!-- 统计用户评论数量 -->
    <select id="countByUserId" resultType="int">
        SELECT COUNT(*) FROM tune_comments WHERE user_id = #{userId}
    </select>
    
    <!-- 获取用户评论过的调校ID列表 -->
    <select id="selectTuneIdsByUserId" resultType="string">
        SELECT tune_id FROM tune_comments WHERE user_id = #{userId} 
        GROUP BY tune_id 
        ORDER BY MAX(created_at) DESC
    </select>
    
    <!-- 根据评论ID获取回复 -->
    <select id="selectRepliesByCommentId" resultMap="ReplyResultMap">
        SELECT id, comment_id, user_id, user_xbox_id, content, like_count, created_at, updated_at
        FROM comment_replies
        WHERE comment_id = #{commentId}
        ORDER BY created_at ASC
    </select>
    
    <!-- 根据ID获取回复 -->
    <select id="selectReplyById" resultMap="ReplyResultMap">
        SELECT id, comment_id, user_id, user_xbox_id, content, like_count, created_at, updated_at
        FROM comment_replies
        WHERE id = #{id}
    </select>
    
    <!-- 插入回复 -->
    <insert id="insertReply" parameterType="com.forzatune.backend.entity.TuneCommentReply">
        INSERT INTO comment_replies (
            id, comment_id, user_id, user_xbox_id, content, like_count, created_at, updated_at
        ) VALUES (
            #{id}, #{commentId}, #{userId}, #{userXboxId}, #{content}, #{likeCount}, NOW(), NOW()
        )
    </insert>
    
    <!-- 更新回复 -->
    <update id="updateReply" parameterType="com.forzatune.backend.entity.TuneCommentReply">
        UPDATE comment_replies SET
            content = #{content},
            updated_at = NOW()
        WHERE id = #{id}
    </update>
    
    <!-- 删除回复 -->
    <delete id="deleteReplyById">
        DELETE FROM comment_replies WHERE id = #{id}
    </delete>
    
    <!-- 更新回复点赞数 -->
    <update id="updateReplyLikeCount">
        UPDATE comment_replies SET like_count = #{likeCount}, updated_at = NOW() WHERE id = #{id}
    </update>
    
    <!-- 检查用户是否点赞评论 -->
    <select id="isCommentLikedByUser" resultType="boolean">
        SELECT COUNT(*) > 0 FROM comment_likes WHERE comment_id = #{commentId} AND user_id = #{userId}
    </select>
    
    <!-- 检查用户是否点赞回复 -->
    <select id="isReplyLikedByUser" resultType="boolean">
        SELECT COUNT(*) > 0 FROM reply_likes WHERE reply_id = #{replyId} AND user_id = #{userId}
    </select>
    
    <!-- 插入评论点赞 -->
    <insert id="insertCommentLike">
        INSERT INTO comment_likes (comment_id, user_id, created_at) VALUES (#{commentId}, #{userId}, NOW())
    </insert>
    
    <!-- 插入回复点赞 -->
    <insert id="insertReplyLike">
        INSERT INTO reply_likes (reply_id, user_id, created_at) VALUES (#{replyId}, #{userId}, NOW())
    </insert>
    
    <!-- 删除评论点赞 -->
    <delete id="deleteCommentLike">
        DELETE FROM comment_likes WHERE comment_id = #{commentId} AND user_id = #{userId}
    </delete>
    
    <!-- 删除回复点赞 -->
    <delete id="deleteReplyLike">
        DELETE FROM reply_likes WHERE reply_id = #{replyId} AND user_id = #{userId}
    </delete>
    
</mapper> 