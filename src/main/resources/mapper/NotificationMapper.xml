<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forzatune.backend.mapper.NotificationMapper">

    <!-- 结果映射 -->
    <resultMap id="NotificationResultMap" type="com.forzatune.backend.entity.Notification">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="type" column="type" typeHandler="com.forzatune.backend.handler.NotificationTypeHandler"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="relatedId" column="related_id"/>
        <result property="senderId" column="sender_id"/>
        <result property="senderXboxId" column="sender_xbox_id"/>
        <result property="isRead" column="is_read"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 插入通知 -->
    <insert id="insertNotification" parameterType="com.forzatune.backend.entity.Notification">
        INSERT INTO notifications (
            id, user_id, type, title, content, related_id, 
            sender_id, sender_xbox_id, is_read, created_at, updated_at
        ) VALUES (
            #{id}, #{userId}, #{type}, #{title}, #{content}, #{relatedId},
            #{senderId}, #{senderXboxId}, #{isRead}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 根据用户ID获取通知列表（分页） -->
    <select id="selectNotificationsByUserId" resultMap="NotificationResultMap">
        SELECT 
            id, user_id, type, title, content, related_id,
            sender_id, sender_xbox_id, is_read, created_at, updated_at
        FROM notifications 
        WHERE user_id = #{userId}
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 根据用户ID获取未读通知数量 -->
    <select id="countUnreadNotificationsByUserId" resultType="int">
        SELECT COUNT(*) 
        FROM notifications 
        WHERE user_id = #{userId} AND is_read = FALSE
    </select>

    <!-- 标记通知为已读 -->
    <update id="markNotificationAsRead">
        UPDATE notifications 
        SET is_read = TRUE, updated_at = NOW()
        WHERE id = #{id} AND user_id = #{userId}
    </update>

    <!-- 标记用户所有通知为已读 -->
    <update id="markAllNotificationsAsRead">
        UPDATE notifications 
        SET is_read = TRUE, updated_at = NOW()
        WHERE user_id = #{userId} AND is_read = FALSE
    </update>

    <!-- 根据ID删除通知 -->
    <delete id="deleteNotification">
        DELETE FROM notifications 
        WHERE id = #{id} AND user_id = #{userId}
    </delete>

    <!-- 清理用户的旧通知（保留最近的N条） -->
    <delete id="cleanupOldNotifications">
        DELETE FROM notifications 
        WHERE user_id = #{userId} 
        AND id NOT IN (
            SELECT id FROM (
                SELECT id FROM notifications 
                WHERE user_id = #{userId}
                ORDER BY created_at DESC 
                LIMIT #{keepCount}
            ) AS keep_notifications
        )
    </delete>

    <!-- 根据相关ID和类型查找通知（用于避免重复通知） -->
    <select id="selectNotificationByRelatedIdAndType" resultMap="NotificationResultMap">
        SELECT 
            id, user_id, type, title, content, related_id,
            sender_id, sender_xbox_id, is_read, created_at, updated_at
        FROM notifications 
        WHERE user_id = #{userId} 
        AND related_id = #{relatedId} 
        AND type = #{type}
        AND sender_id = #{senderId}
        AND created_at > DATE_SUB(NOW(), INTERVAL 1 DAY)
        LIMIT 1
    </select>

</mapper>
