<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.forzatune.backend.mapper.ProMapper">

    <!-- PRO认证结果映射 -->
    <resultMap id="ProCertificationResultMap" type="com.forzatune.backend.entity.ProCertification">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="type" column="type"/>
        <result property="title" column="title"/>
        <result property="description" column="description"/>
        <result property="verifiedAt" column="verified_at"/>
        <result property="verifiedBy" column="verified_by"/>
        <result property="icon" column="icon"/>
        <result property="status" column="status"/>
    </resultMap>

    <!-- 根据用户ID获取PRO认证 -->
    <select id="selectCertificationsByUserId" resultMap="ProCertificationResultMap">
        SELECT * FROM pro_certifications WHERE user_id = #{userId} ORDER BY verified_at DESC
    </select>

    <!-- 根据ID获取PRO认证 -->
    <select id="selectById" resultMap="ProCertificationResultMap">
        SELECT * FROM pro_certifications WHERE id = #{id}
    </select>

    <!-- 获取所有PRO认证 -->
    <select id="selectAllCertifications" resultMap="ProCertificationResultMap">
        SELECT * FROM pro_certifications ORDER BY verified_at DESC
    </select>

    <!-- 插入PRO认证 -->
    <insert id="insertCertification" parameterType="com.forzatune.backend.entity.ProCertification" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO pro_certifications (
        user_id, type, title, description, verified_at, verified_by, icon, status
        ) VALUES (
        #{userId}, #{type}, #{title}, #{description}, #{verifiedAt}, #{verifiedBy}, #{icon}, #{status}
        )
    </insert>

    <!-- 更新PRO认证 -->
    <update id="updateCertification" parameterType="com.forzatune.backend.entity.ProCertification">
        UPDATE pro_certifications SET
        type = #{type},
        title = #{title},
        description = #{description},
        verified_at = #{verifiedAt},
        verified_by = #{verifiedBy},
        icon = #{icon},
        status = #{status}
        WHERE id = #{id}
    </update>

    <!-- 删除PRO认证 -->
    <delete id="deleteCertification">
        DELETE FROM pro_certifications WHERE id = #{id}
    </delete>

    <!-- 统计用户PRO认证数量 -->
    <select id="countByUserId" resultType="int">
        SELECT COUNT(*) FROM pro_certifications WHERE user_id = #{userId}
    </select>

    <!-- 获取PRO申请列表 -->
    <select id="selectApplications" resultType="map">
        SELECT * FROM pro_applications
        <if test="status != null and status != ''">
            WHERE status = #{status}
        </if>
        ORDER BY submitted_at DESC
    </select>

    <!-- 根据用户ID获取PRO申请 -->
    <select id="selectApplicationsByUserId" resultType="map">
        SELECT * FROM pro_applications WHERE user_id = #{userId} ORDER BY submitted_at DESC
    </select>

    <!-- 根据ID获取PRO申请（为Map结果提供驼峰别名，便于服务层读取） -->
    <select id="selectApplicationById" resultType="map">
        SELECT 
            id,
            user_id AS userId,
            gamertag,
            experience,
            achievements,
            sample_tunes AS sampleTunes,
            status,
            submitted_at AS submittedAt,
            reviewed_at AS reviewedAt,
            reviewed_by AS reviewedBy,
            notes
        FROM pro_applications 
        WHERE id = #{id}
    </select>

    <!-- 插入PRO申请（由应用层生成UUID主键） -->
    <insert id="insertApplication" parameterType="map">
        INSERT INTO pro_applications (
        id, user_id, gamertag, experience, achievements, sample_tunes, status, submitted_at
        ) VALUES (
        #{id}, #{userId}, #{gamertag}, #{experience},
        #{achievements, typeHandler=com.forzatune.backend.handler.JsonTypeHandler},
        #{sampleTunes, typeHandler=com.forzatune.backend.handler.JsonTypeHandler},
        'PENDING', NOW()
        )
    </insert>

    <!-- 更新PRO申请状态 -->
    <update id="updateApplicationStatus">
        UPDATE pro_applications SET
        status = #{status},
        reviewed_at = NOW(),
        reviewed_by = #{reviewedBy},
        notes = #{notes}
        WHERE id = #{id}
    </update>

    <!-- 提升用户为PRO -->
    <update id="promoteUserToPro">
        UPDATE users SET
        is_pro_player = true,
        pro_player_since = NOW(),
        user_tier = 'PRO'
        WHERE id = #{userId}
    </update>

    <!-- 统计PRO用户数量 -->
    <select id="countProUsers" resultType="int">
        SELECT COUNT(*) FROM users WHERE is_pro_player = true
    </select>

    <!-- 统计待处理申请数量 -->
    <select id="countPendingApplications" resultType="int">
        SELECT COUNT(*) FROM pro_applications WHERE status = 'PENDING'
    </select>

    <!-- 统计总认证数量 -->
    <select id="countTotalCertifications" resultType="int">
        SELECT COUNT(*) FROM pro_certifications WHERE status = 'APPROVED'
    </select>

</mapper>
